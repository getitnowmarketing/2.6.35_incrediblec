*** drivers/misc/bma150_spi.c	2011-08-19 20:19:19.136195586 -0400
--- ../incrediblec-MR3-2.6.32-g9a2fc16/drivers/misc/bma150_spi.c	2010-11-01 04:03:42.000000000 -0400
***************
*** 10,15 ****
--- 10,16 ----
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
+  *
   */
  
  #include <linux/i2c.h>
***************
*** 24,35 ****
  #include <linux/platform_device.h>
  #include <mach/atmega_microp.h>
  
- /*#define EARLY_SUSPEND_BMA 1*/
- #define D(x...) printk(KERN_DEBUG "[GSNR][BMA150 SPI] " x)
- #define E(x...) printk(KERN_ERR "[GSNR][BMA150 SPI ERROR] " x)
- #define DIF(x...) if (debug_flag) \
- 			printk(KERN_DEBUG "[GSNR][BMA150 SPI DEBUG] " x)
- 
  struct early_suspend bma_early_suspend;
  
  static struct bma150_platform_data *this_pdata;
--- 25,30 ----
***************
*** 37,56 ****
  static struct mutex gsensor_RW_mutex;
  static struct mutex gsensor_set_mode_mutex;
  
- static atomic_t PhoneOn_flag = ATOMIC_INIT(0);
- static atomic_t Disable_flag = ATOMIC_INIT(0);
- #define DEVICE_ACCESSORY_ATTR(_name, _mode, _show, _store) \
- struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)
- 
- static int debug_flag;
- static char update_user_calibrate_data;
- 
  static int spi_microp_enable(uint8_t on)
  {
  	int ret;
  	ret = microp_spi_vote_enable(SPI_GSENSOR, on);
  	if (ret < 0)
! 		E("%s: i2c_write_block fail\n", __func__);
  
  	return ret;
  }
--- 32,43 ----
  static struct mutex gsensor_RW_mutex;
  static struct mutex gsensor_set_mode_mutex;
  
  static int spi_microp_enable(uint8_t on)
  {
  	int ret;
  	ret = microp_spi_vote_enable(SPI_GSENSOR, on);
  	if (ret < 0)
! 		printk(KERN_ERR "%s: i2c_write_block fail\n", __func__);
  
  	return ret;
  }
***************
*** 63,76 ****
  
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_REG_DATA_REQ, data, 1);
  	if (ret < 0) {
! 		E("%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
  
  	ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_REG_DATA, data, 2);
  	if (ret < 0) {
! 		E("%s: i2c_read_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
--- 50,63 ----
  
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_REG_DATA_REQ, data, 1);
  	if (ret < 0) {
! 		printk(KERN_ERR "%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
  
  	ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_REG_DATA, data, 2);
  	if (ret < 0) {
! 		printk(KERN_ERR "%s: i2c_read_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
***************
*** 88,94 ****
  
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_REG, data, 2);
  	if (ret < 0) {
! 		E("%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
--- 75,81 ----
  
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_REG, data, 2);
  	if (ret < 0) {
! 		printk(KERN_ERR "%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
***************
*** 164,170 ****
  	buffer[0] = 1;
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_DATA_REQ, buffer, 1);
  	if (ret < 0) {
! 		E("%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
--- 151,157 ----
  	buffer[0] = 1;
  	ret = microp_i2c_write(MICROP_I2C_WCMD_GSENSOR_DATA_REQ, buffer, 1);
  	if (ret < 0) {
! 		printk(KERN_ERR "%s: i2c_write_block fail\n", __func__);
  		mutex_unlock(&gsensor_RW_mutex);
  		return ret;
  	}
***************
*** 188,194 ****
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_X_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			E("%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  		}
--- 175,181 ----
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_X_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			printk(KERN_ERR "%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  		}
***************
*** 199,205 ****
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_Y_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			E("%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  			}
--- 186,192 ----
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_Y_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			printk(KERN_ERR "%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  			}
***************
*** 210,216 ****
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_Z_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			E("%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  			}
--- 197,203 ----
  		ret = microp_i2c_read(MICROP_I2C_RCMD_GSENSOR_Z_DATA,
  					buffer, 2);
  		if (ret < 0) {
! 			printk(KERN_ERR "%s: i2c_read_block fail\n", __func__);
  			mutex_unlock(&gsensor_RW_mutex);
  			return ret;
  			}
***************
*** 225,232 ****
  		__func__, buffer[0], buffer[1], buffer[2], \
  		buffer[3], buffer[4], buffer[5]);*/
  
- 	DIF("%s: (x, y, z) = (%d, %d, %d)\n",
- 		__func__, rbuf[0], rbuf[1], rbuf[2]);
  	mutex_unlock(&gsensor_RW_mutex);
  
  	return 1;
--- 212,217 ----
***************
*** 234,249 ****
  
  static int __spi_bma150_set_mode(char mode)
  {
! 	char buffer[2] = "";
  	int ret;
- 
- 	if (atomic_read(&Disable_flag) == 1)
- 		mode = BMA_MODE_SLEEP;
- 
  	mutex_lock(&gsensor_set_mode_mutex);
  	if (mode == BMA_MODE_NORMAL) {
  		spi_microp_enable(1);
! 		printk(KERN_INFO "[GSNR] Gsensor enable\n");
  	}
  
  	buffer[0] = SMB150_CTRL_REG;
--- 219,231 ----
  
  static int __spi_bma150_set_mode(char mode)
  {
! 	char buffer[2];
  	int ret;
  	mutex_lock(&gsensor_set_mode_mutex);
  	if (mode == BMA_MODE_NORMAL) {
  		spi_microp_enable(1);
! 		printk(KERN_INFO "%s: BMA get into NORMAL mode!\n",
! 			__func__);
  	}
  
  	buffer[0] = SMB150_CTRL_REG;
***************
*** 259,265 ****
  
  	if (mode == BMA_MODE_SLEEP) {
  		spi_microp_enable(0);
! 		printk(KERN_INFO "[GSNR] Gsensor disable\n");
  	}
  	mutex_unlock(&gsensor_set_mode_mutex);
  	return ret;
--- 241,248 ----
  
  	if (mode == BMA_MODE_SLEEP) {
  		spi_microp_enable(0);
! 		printk(KERN_INFO "%s: BMA get into SLEEP mode!\n",
! 			__func__);
  	}
  	mutex_unlock(&gsensor_set_mode_mutex);
  	return ret;
***************
*** 279,301 ****
  static int spi_bma150_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
  	   unsigned long arg)
  {
- 
  	void __user *argp = (void __user *)arg;
! 
! 	char rwbuf[8] = "";
  	char *toRbuf;
  	int ret = -1;
  	short buf[8], temp;
- 	int kbuf = 0;
- 
- 	DIF("%s: cmd = 0x%x\n", __func__, cmd);
  
  	switch (cmd) {
  	case BMA_IOCTL_READ:
  	case BMA_IOCTL_WRITE:
  	case BMA_IOCTL_SET_MODE:
- 	case BMA_IOCTL_SET_CALI_MODE:
- 	case BMA_IOCTL_SET_UPDATE_USER_CALI_DATA:
  		if (copy_from_user(&rwbuf, argp, sizeof(rwbuf)))
  			return -EFAULT;
  		break;
--- 262,277 ----
  static int spi_bma150_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
  	   unsigned long arg)
  {
  	void __user *argp = (void __user *)arg;
! 	char rwbuf[8];
  	char *toRbuf;
  	int ret = -1;
  	short buf[8], temp;
  
  	switch (cmd) {
  	case BMA_IOCTL_READ:
  	case BMA_IOCTL_WRITE:
  	case BMA_IOCTL_SET_MODE:
  		if (copy_from_user(&rwbuf, argp, sizeof(rwbuf)))
  			return -EFAULT;
  		break;
***************
*** 303,312 ****
  		if (copy_from_user(&buf, argp, sizeof(buf)))
  			return -EFAULT;
  		break;
- 	case BMA_IOCTL_WRITE_CALI_VALUE:
- 		if (copy_from_user(&kbuf, argp, sizeof(kbuf)))
- 			return -EFAULT;
- 		break;
  	default:
  		break;
  	}
--- 279,284 ----
***************
*** 332,358 ****
  		if (ret < 0)
  			return ret;
  		break;
- 	case BMA_IOCTL_WRITE_CALI_VALUE:
- 		this_pdata->gs_kvalue = kbuf;
- 		break;
  	case BMA_IOCTL_READ_ACCELERATION:
  		ret = spi_bma150_TransRBuff(&buf[0]);
  		if (ret < 0)
  			return ret;
  		break;
- 	case BMA_IOCTL_READ_CALI_VALUE:
- 		if ((this_pdata->gs_kvalue & (0x67 << 24)) != (0x67 << 24)) {
- 			rwbuf[0] = 0;
- 			rwbuf[1] = 0;
- 			rwbuf[2] = 0;
- 		} else {
- 			rwbuf[0] = (this_pdata->gs_kvalue >> 16) & 0xFF;
- 			rwbuf[1] = (this_pdata->gs_kvalue >>  8) & 0xFF;
- 			rwbuf[2] =  this_pdata->gs_kvalue        & 0xFF;
- 		}
- 		DIF("%s: CALI(x, y, z) = (%d, %d, %d)\n",
- 			__func__, rwbuf[0], rwbuf[1], rwbuf[2]);
- 		break;
  	case BMA_IOCTL_SET_MODE:
  		/*printk(KERN_DEBUG
  		"%s: BMA_IOCTL_SET_MODE by ioctl = %d\n",
--- 304,314 ----
***************
*** 368,388 ****
  		if (this_pdata)
  			temp = this_pdata->chip_layout;
  		break;
- 	case BMA_IOCTL_GET_CALI_MODE:
- 		if (this_pdata)
- 			temp = this_pdata->calibration_mode;
- 		break;
- 	case BMA_IOCTL_SET_CALI_MODE:
- 		if (this_pdata)
- 			this_pdata->calibration_mode = rwbuf[0];
- 		break;
- 	case BMA_IOCTL_GET_UPDATE_USER_CALI_DATA:
- 			temp = update_user_calibrate_data;
- 		break;
- 	case BMA_IOCTL_SET_UPDATE_USER_CALI_DATA:
- 			update_user_calibrate_data = rwbuf[0];
- 		break;
- 
  	default:
  		return -ENOTTY;
  	}
--- 324,329 ----
***************
*** 397,406 ****
  		if (copy_to_user(argp, &buf, sizeof(buf)))
  			return -EFAULT;
  		break;
- 	case BMA_IOCTL_READ_CALI_VALUE:
- 		if (copy_to_user(argp, &rwbuf, sizeof(rwbuf)))
- 			return -EFAULT;
- 		break;
  	case BMA_IOCTL_GET_INT:
  		if (copy_to_user(argp, &temp, sizeof(temp)))
  			return -EFAULT;
--- 338,343 ----
***************
*** 409,422 ****
  		if (copy_to_user(argp, &temp, sizeof(temp)))
  			return -EFAULT;
  		break;
- 	case BMA_IOCTL_GET_CALI_MODE:
- 		if (copy_to_user(argp, &temp, sizeof(temp)))
- 			return -EFAULT;
- 		break;
- 	case BMA_IOCTL_GET_UPDATE_USER_CALI_DATA:
- 		if (copy_to_user(argp, &temp, sizeof(temp)))
- 			return -EFAULT;
- 		break;
  	default:
  		break;
  	}
--- 346,351 ----
***************
*** 437,453 ****
  	.fops = &spi_bma_fops,
  };
  
- 
- #ifdef EARLY_SUSPEND_BMA
- 
  static void bma150_early_suspend(struct early_suspend *handler)
  {
  	int ret = 0;
! 
! 	if (!atomic_read(&PhoneOn_flag)) {
! 		ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
! 	} else
! 		printk(KERN_DEBUG "bma150_early_suspend: PhoneOn_flag is set\n");
  
  	/*printk(KERN_DEBUG
  		"%s: spi_bma150_set_mode returned = %d!\n",
--- 366,375 ----
  	.fops = &spi_bma_fops,
  };
  
  static void bma150_early_suspend(struct early_suspend *handler)
  {
  	int ret = 0;
! 	ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
  
  	/*printk(KERN_DEBUG
  		"%s: spi_bma150_set_mode returned = %d!\n",
***************
*** 456,676 ****
  
  static void bma150_early_resume(struct early_suspend *handler)
  {
- 	int ret = 0;
- 
- 	ret = __spi_bma150_set_mode(BMA_MODE_NORMAL);
- 	if (ret < 0)
- 		printk(KERN_ERR "%s: __spi_bma150_set_mode FAIL!\n", __func__);
- 
  	/*printk(KERN_DEBUG
  		"%s: spi_bma150_set_mode returned = %d!\n",
  			__func__, ret);*/
  }
  
- #else /* EARLY_SUSPEND_BMA */
- 
- static int bma150_suspend(struct device *device)
- {
- 	int ret = 0;
- 
- 	ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
- 	if (ret < 0)
- 		E("%s: __spi_bma150_set_mode FAIL!\n", __func__);
- 
- 	return 0;
- }
- 
- static int bma150_resume(struct device *device)
- {
- 	int ret = 0;
- 
- 	ret = __spi_bma150_set_mode(BMA_MODE_NORMAL);
- 	if (ret < 0)
- 		printk(KERN_ERR "%s: __spi_bma150_set_mode FAIL!\n", __func__);
- 
- 	return 0;
- }
- #endif /* EARLY_SUSPEND_BMA */
- 
- static ssize_t spi_bma150_show(struct device *dev,
- 				  struct device_attribute *attr, char *buf)
- {
- 	char *s = buf;
- 	s += sprintf(s, "%d\n", atomic_read(&PhoneOn_flag));
- 	return (s - buf);
- }
- 
- static ssize_t spi_bma150_store(struct device *dev,
- 				   struct device_attribute *attr,
- 				   const char *buf, size_t count)
- {
- 	if (count == (strlen("enable") + 1) &&
- 	   strncmp(buf, "enable", strlen("enable")) == 0) {
- 		atomic_set(&PhoneOn_flag, 1);
- 		printk(KERN_DEBUG "spi_bma150_store: PhoneOn_flag=%d\n", atomic_read(&PhoneOn_flag));
- 		return count;
- 	}
- 	if (count == (strlen("disable") + 1) &&
- 	   strncmp(buf, "disable", strlen("disable")) == 0) {
- 		atomic_set(&PhoneOn_flag, 0);
- 		printk(KERN_DEBUG "spi_bma150_store: PhoneOn_flag=%d\n", atomic_read(&PhoneOn_flag));
- 		return count;
- 	}
- 	E("spi_bma150_store: invalid argument\n");
- 	return -EINVAL;
- 
- }
- 
- static DEVICE_ACCESSORY_ATTR(PhoneOnOffFlag, 0664, \
- 	spi_bma150_show, spi_bma150_store);
- 
- static ssize_t spi_dis_show(struct device *dev,
- 				  struct device_attribute *attr, char *buf)
- {
- 	char *s = buf;
- 	s += sprintf(s, "%d\n", atomic_read(&Disable_flag));
- 	return s - buf;
- }
- 
- static ssize_t spi_dis_store(struct device *dev,
- 				   struct device_attribute *attr,
- 				   const char *buf, size_t count)
- {
- 	int dis_g;
- 	int ret = -1;
- 
- 	dis_g = -1;
- 	sscanf(buf, "%d", &dis_g);
- 
- 	if (dis_g != 0 && dis_g != 1)
- 		return -EINVAL;
- 
- 	if (dis_g) {
- 		atomic_set(&Disable_flag, 1);
- 		printk(KERN_DEBUG "%s: Disable_flag = %d\n",
- 			__func__, atomic_read(&Disable_flag));
- 
- 		ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
- 		if (ret < 0)
- 			return ret;
- 	} else {
- 		atomic_set(&Disable_flag, 0);
- 		printk(KERN_DEBUG "%s: Disable_flag = %d\n",
- 			__func__, atomic_read(&Disable_flag));
- 
- 		ret = __spi_bma150_set_mode(BMA_MODE_NORMAL);
- 		if (ret < 0)
- 			return ret;
- 	}
- 
- 	return count;
- }
- 
- static DEVICE_ACCESSORY_ATTR(Disable_flag, 0664, \
- 	spi_dis_show, spi_dis_store);
- 
- static ssize_t debug_flag_show(struct device *dev,
- 				  struct device_attribute *attr, char *buf)
- {
- 	char *s = buf;
- 	char buffer, range = -1, bandwidth = -1, mode = -1;
- 	int ret;
- 
- 	buffer = RANGE_BWIDTH_REG;
- 	if (spi_gsensor_read(&buffer) < 0)
- 		return -EIO;
- 	range = (buffer & 0x18) >> 3;
- 	bandwidth = (buffer & 0x7);
- 
- 	buffer = SMB150_CTRL_REG;
- 	ret = spi_gsensor_read(&buffer);
- 	if (ret < 0) {
- 		mutex_unlock(&gsensor_set_mode_mutex);
- 		return -1;
- 	}
- 	mode = (buffer & 0x1);
- 
- 	s += sprintf(s, "debug_flag = %d, range = 0x%x, bandwidth = 0x%x, "
- 		"mode = 0x%x\n", debug_flag, range, bandwidth, mode);
- 
- 	return s - buf;
- }
- static ssize_t debug_flag_store(struct device *dev,
- 				   struct device_attribute *attr,
- 				   const char *buf, size_t count)
- {
- 	debug_flag = -1;
- 	sscanf(buf, "%d", &debug_flag);
- 
- 	return count;
- 
- }
- 
- static DEVICE_ACCESSORY_ATTR(debug_en, 0664, \
- 	debug_flag_show, debug_flag_store);
- 
- int spi_bma150_registerAttr(void)
- {
- 	int ret;
- 	struct class *htc_accelerometer_class;
- 	struct device *accelerometer_dev;
- 	struct device *disable_dev;
- 
- 	htc_accelerometer_class = class_create(THIS_MODULE, "htc_accelerometer");
- 	if (IS_ERR(htc_accelerometer_class)) {
- 		ret = PTR_ERR(htc_accelerometer_class);
- 		htc_accelerometer_class = NULL;
- 		goto err_create_class;
- 	}
- 
- 	accelerometer_dev = device_create(htc_accelerometer_class,
- 				NULL, 0, "%s", "accelerometer");
- 	if (unlikely(IS_ERR(accelerometer_dev))) {
- 		ret = PTR_ERR(accelerometer_dev);
- 		accelerometer_dev = NULL;
- 		goto err_create_accelerometer_device;
- 	}
- 
- 	disable_dev = device_create(htc_accelerometer_class,
- 				NULL, 0, "%s", "disable_g");
- 	if (unlikely(IS_ERR(disable_dev))) {
- 		ret = PTR_ERR(disable_dev);
- 		disable_dev = NULL;
- 		goto err_create_disable_device;
- 	}
- 
- 	/* register the attributes */
- 	ret = device_create_file(accelerometer_dev, &dev_attr_PhoneOnOffFlag);
- 	if (ret)
- 		goto err_create_accelerometer_device_file;
- 
- 	/* register the debug_en attributes */
- 	ret = device_create_file(accelerometer_dev, &dev_attr_debug_en);
- 	if (ret)
- 		goto err_create_accelerometer_debug_en_device_file;
- 
- 	/* register the attributes */
- 	ret = device_create_file(disable_dev, &dev_attr_Disable_flag);
- 	if (ret)
- 		goto err_create_disable_device_file;
- 
- 	return 0;
- 
- err_create_disable_device_file:
- 	device_remove_file(accelerometer_dev, &dev_attr_debug_en);
- err_create_accelerometer_debug_en_device_file:
- 	device_remove_file(accelerometer_dev, &dev_attr_PhoneOnOffFlag);
- err_create_accelerometer_device_file:
- 	device_unregister(disable_dev);
- err_create_disable_device:
- 	device_unregister(accelerometer_dev);
- err_create_accelerometer_device:
- 	class_destroy(htc_accelerometer_class);
- err_create_class:
- 
- 	return ret;
- }
- 
  static int spi_gsensor_initial(void)
  {
  	int ret;
--- 378,388 ----
***************
*** 693,699 ****
  */
  	ret = misc_register(&spi_bma_device);
  	if (ret < 0) {
! 		E("%s: init misc_register fail\n", __func__);
  		return ret;
  	}
  
--- 405,411 ----
  */
  	ret = misc_register(&spi_bma_device);
  	if (ret < 0) {
! 		printk(KERN_ERR "%s: init misc_register fail\n", __func__);
  		return ret;
  	}
  
***************
*** 703,735 ****
  
  	ret = spi_microp_enable(1);
  	if (ret) {
! 		E("%s: spi_microp_enable(1) fail!\n", __func__);
  		goto err_spi_enable;
  	}
  
  	ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
  	if (ret) {
! 		E("%s: set BMA_MODE_SLEEP fail!\n", __func__);
  		goto err_set_mode;
  	}
  
- #ifdef EARLY_SUSPEND_BMA
  	bma_early_suspend.suspend = bma150_early_suspend;
  	bma_early_suspend.resume = bma150_early_resume;
  	register_early_suspend(&bma_early_suspend);
- #endif
- 
- 	ret = spi_bma150_registerAttr();
- 	if (ret) {
- 		E("%s: set spi_bma150_registerAttr fail!\n", __func__);
- 		goto err_registerAttr;
- 	}
- 
- 	debug_flag = 0;
  
  	return 0;
  
- err_registerAttr:
  err_set_mode:
  	spi_microp_enable(0);
  err_spi_enable:
--- 415,436 ----
  
  	ret = spi_microp_enable(1);
  	if (ret) {
! 		printk(KERN_ERR "%s: spi_microp_enable(1) fail!\n", __func__);
  		goto err_spi_enable;
  	}
  
  	ret = __spi_bma150_set_mode(BMA_MODE_SLEEP);
  	if (ret) {
! 		printk(KERN_ERR "%s: set BMA_MODE_SLEEP fail!\n", __func__);
  		goto err_set_mode;
  	}
  
  	bma_early_suspend.suspend = bma150_early_suspend;
  	bma_early_suspend.resume = bma150_early_resume;
  	register_early_suspend(&bma_early_suspend);
  
  	return 0;
  
  err_set_mode:
  	spi_microp_enable(0);
  err_spi_enable:
***************
*** 741,752 ****
  static int  spi_bma150_probe(struct platform_device *pdev)
  {
  	printk(KERN_INFO "%s: G-sensor connect with microP: "
! 			"start initial, kvalue = 0x%x\n", __func__, gs_kvalue);
  
  	this_pdata = pdev->dev.platform_data;
- 
- 	this_pdata->gs_kvalue = gs_kvalue;
- 
  /*
  	printk(KERN_DEBUG "%s: this_pdata->microp_new_cmd = %d\n",
  			__func__, this_pdata->microp_new_cmd);
--- 442,450 ----
  static int  spi_bma150_probe(struct platform_device *pdev)
  {
  	printk(KERN_INFO "%s: G-sensor connect with microP: "
! 			"start initial\n", __func__);
  
  	this_pdata = pdev->dev.platform_data;
  /*
  	printk(KERN_DEBUG "%s: this_pdata->microp_new_cmd = %d\n",
  			__func__, this_pdata->microp_new_cmd);
***************
*** 762,783 ****
  	return 0;
  }
  
- #ifndef EARLY_SUSPEND_BMA
- static struct dev_pm_ops bma150_pm_ops = {
- 	.suspend_noirq = bma150_suspend,
- 	.resume_noirq = bma150_resume,
- };
- #endif
- 
  static struct platform_driver spi_bma150_driver = {
  	.probe		= spi_bma150_probe,
  	.remove		= spi_bma150_remove,
  	.driver		= {
  		.name		= BMA150_G_SENSOR_NAME,
  		.owner		= THIS_MODULE,
- #ifndef EARLY_SUSPEND_BMA
- 		.pm 		= &bma150_pm_ops
- #endif
  	},
  };
  
--- 460,471 ----
