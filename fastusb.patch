*** drivers/i2c/chips/smb329.c	2011-08-19 20:19:19.396195576 -0400
--- ../Chad0989-android_kernel_common-a7c21fa/drivers/i2c/chips/smb329.c	2011-08-29 22:11:13.258040202 -0400
***************
*** 18,32 ****
  #include <linux/slab.h>
  #include <linux/i2c.h>
  #include <linux/delay.h>
  #include <mach/htc_battery.h>
  #include <asm/mach-types.h>
  
  static const unsigned short normal_i2c[] = { I2C_CLIENT_END };
  
  static int smb329_probe(struct i2c_client *client,
  			const struct i2c_device_id *id);
! /* static int smb329_detect(struct i2c_client *client, int kind,
! 			 struct i2c_board_info *info); */
  static int smb329_remove(struct i2c_client *client);
  
  
--- 18,41 ----
  #include <linux/slab.h>
  #include <linux/i2c.h>
  #include <linux/delay.h>
+ #include <linux/kobject.h>
+ #include <linux/sysfs.h>
  #include <mach/htc_battery.h>
  #include <asm/mach-types.h>
  
  static const unsigned short normal_i2c[] = { I2C_CLIENT_END };
  
+ int fast_charge_usb;
+ 
+ /**
+  * Insmod parameters
+  */
+ I2C_CLIENT_INSMOD_1(smb329);
+ 
  static int smb329_probe(struct i2c_client *client,
  			const struct i2c_device_id *id);
! static int smb329_detect(struct i2c_client *client, int kind,
! 			 struct i2c_board_info *info);
  static int smb329_remove(struct i2c_client *client);
  
  
***************
*** 169,264 ****
  {
  	int result = 0;
      u8 version;
- 	u8 reg_00h;
- 	u8 reg_01h;
- 	u8 reg_05h;
- 	u8 reg_31h;
- 	u8 reg_33h;
- 	u8 reg_35h;
- 	u8 reg_36h;
- 	u8 reg_37h;
  
  	switch (ctl) {
  	case DISABLE:
! 		pr_info("batt: Switch charger OFF\n");
! 		smb329_i2c_read_byte(&reg_00h, 0x00);
! 		smb329_i2c_read_byte(&reg_01h, 0x01);
! 		smb329_i2c_read_byte(&reg_05h, 0x05);
! 		smb329_i2c_read_byte(&reg_31h, 0x31);
! 		smb329_i2c_read_byte(&reg_33h, 0x33);
! 		smb329_i2c_read_byte(&reg_35h, 0x35);
! 		smb329_i2c_read_byte(&reg_36h, 0x36);
! 		smb329_i2c_read_byte(&reg_37h, 0x37);
! 		pr_info("batt: Switch charger ON (SLOW):"
! 			" reg_05h=%x, reg_31h=%x\n", reg_05h, reg_31h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_00h=%x, reg_01h=%x, reg_33h=%x\n"
! 			, reg_00h, reg_01h, reg_33h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_35h=%x, reg_36h=%x, reg_37h=%x\n"
! 			, reg_35h, reg_36h, reg_37h);
  		break;
  	case ENABLE_SLOW_CHG:
! 		pr_info("Switch charger ON (SLOW)\n");
! 		smb329_i2c_write_byte(0x88, 0x31);
! 		smb329_i2c_read_byte(&reg_31h, 0x31);
! 		smb329_i2c_write_byte(0xD0, 0x01);
! 		smb329_i2c_write_byte(0x08, 0x05);
! 		smb329_i2c_read_byte(&reg_05h, 0x05);
! 		smb329_i2c_read_byte(&reg_00h, 0x00);
! 		smb329_i2c_read_byte(&reg_01h, 0x01);
! 		smb329_i2c_read_byte(&reg_35h, 0x35);
! 		smb329_i2c_read_byte(&reg_36h, 0x36);
! 		smb329_i2c_read_byte(&reg_37h, 0x37);
! 		pr_info("batt: Switch charger ON (SLOW):"
! 			" reg_05h=%x, reg_31h=%x\n", reg_05h, reg_31h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_00h=%x, reg_01h=%x\n", reg_00h, reg_01h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_35h=%x, reg_36h=%x, reg_37h=%x\n"
! 			, reg_35h, reg_36h, reg_37h);
  		break;
  	case ENABLE_FAST_CHG:
  		pr_info("Switch charger ON (FAST)\n");
  		smb329_i2c_write_byte(0x84, 0x31);
- 		smb329_i2c_read_byte(&reg_31h, 0x31);
  		smb329_i2c_write_byte(0xD0, 0x01);
  		smb329_i2c_write_byte(0x08, 0x05);
- 		smb329_i2c_write_byte(0xA9, 0x00);
- 		smb329_i2c_read_byte(&reg_05h, 0x05);
  		smb329_i2c_read_byte(&version, 0x3B);
! 		smb329_i2c_read_byte(&reg_00h, 0x00);
! 		smb329_i2c_read_byte(&reg_01h, 0x01);
! 		smb329_i2c_read_byte(&reg_35h, 0x35);
! 		smb329_i2c_read_byte(&reg_36h, 0x36);
! 		smb329_i2c_read_byte(&reg_37h, 0x37);
! 		pr_info("batt: Switch charger ON (FAST):"
! 			" reg_05h=%x, reg_31h=%x, version=%x\n"
! 			, reg_05h, reg_31h, version);
! 		pr_info("batt: Switch charger ON (FAST) DEBUG:"
! 			" reg_00h=%x, reg_01h=%x\n", reg_00h, reg_01h);
! 		pr_info("batt: Switch charger ON (FAST) DEBUG:"
! 			" reg_35h=%x, reg_36h=%x, reg_37h=%x\n"
! 			, reg_35h, reg_36h, reg_37h);
! 		break;
! 	case CHARGER_CHK:
! 		pr_info("batt: Switch charger CHECK\n");
! 		smb329_i2c_read_byte(&reg_00h, 0x00);
! 		smb329_i2c_read_byte(&reg_01h, 0x01);
! 		smb329_i2c_read_byte(&reg_05h, 0x05);
! 		smb329_i2c_read_byte(&reg_31h, 0x31);
! 		smb329_i2c_read_byte(&reg_33h, 0x33);
! 		smb329_i2c_read_byte(&reg_35h, 0x35);
! 		smb329_i2c_read_byte(&reg_36h, 0x36);
! 		smb329_i2c_read_byte(&reg_37h, 0x37);
! 		pr_info("batt: Switch charger ON (SLOW):"
! 			" reg_05h=%x, reg_31h=%x\n", reg_05h, reg_31h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_00h=%x, reg_01h=%x, reg_33h=%x\n"
! 			, reg_00h, reg_01h, reg_33h);
! 		pr_info("batt: Switch charger ON (SLOW) DEBUG:"
! 			" reg_35h=%x, reg_36h=%x, reg_37h=%x\n"
! 			, reg_35h, reg_36h, reg_37h);
  		break;
  	default:
  		pr_info("%s: Not supported battery ctr called.!", __func__);
--- 178,215 ----
  {
  	int result = 0;
      u8 version;
  
  	switch (ctl) {
  	case DISABLE:
! 		pr_info("Switch charger OFF\n");
  		break;
  	case ENABLE_SLOW_CHG:
! 			if (fast_charge_usb == 0) {
! 				pr_info("Switch charger ON (SLOW)\n");
! 				smb329_i2c_write_byte(0x88, 0x31);
! 				smb329_i2c_write_byte(0x08, 0x05);
! 			}
! 			else {
! 				pr_info("Switch charger ON (FAST)\n");
! 				printk(KERN_INFO "fast charge enabled\n");
! 				smb329_i2c_write_byte(0x84, 0x31);
! 				smb329_i2c_write_byte(0xD0, 0x01);
! 				smb329_i2c_write_byte(0x08, 0x05);
! 				smb329_i2c_read_byte(&version, 0x3B);
! 				pr_info("Switch charger version%x\n", version);
! 				if ((version & 0x18) == 0x0)
! 					smb329_i2c_write_byte(0xA9, 0x00);
! 			}
  		break;
  	case ENABLE_FAST_CHG:
  		pr_info("Switch charger ON (FAST)\n");
  		smb329_i2c_write_byte(0x84, 0x31);
  		smb329_i2c_write_byte(0xD0, 0x01);
  		smb329_i2c_write_byte(0x08, 0x05);
  		smb329_i2c_read_byte(&version, 0x3B);
! 		pr_info("Switch charger version%x\n", version);
! 		if ((version & 0x18) == 0x0)
! 			smb329_i2c_write_byte(0xA9, 0x00);
  		break;
  	default:
  		pr_info("%s: Not supported battery ctr called.!", __func__);
***************
*** 283,289 ****
  	.notifier_call = cable_status_handler_func,
  };
  
- #if 0
  static int smb329_detect(struct i2c_client *client, int kind,
  			 struct i2c_board_info *info)
  {
--- 234,239 ----
***************
*** 296,314 ****
  
  	return 0;
  }
- #endif
  
  static int smb329_probe(struct i2c_client *client,
  			const struct i2c_device_id *id)
  {
  	struct smb329_i2c_client   *data = &smb329_i2c_module;
  
! 	if (i2c_check_functionality(client->adapter, I2C_FUNC_I2C) == 0) {
  		dev_dbg(&client->dev, "[SMB329]:I2C fail\n");
  		return -EIO;
! 	}
! 	if (machine_is_incrediblec() || (machine_is_supersonic()
! 	    && (system_rev < 1)))
  		register_notifier_cable_status(&cable_status_handler);
  
  	data->address = client->addr;
--- 246,262 ----
  
  	return 0;
  }
  
  static int smb329_probe(struct i2c_client *client,
  			const struct i2c_device_id *id)
  {
  	struct smb329_i2c_client   *data = &smb329_i2c_module;
  
!     if (i2c_check_functionality(client->adapter, I2C_FUNC_I2C) == 0) {
  		dev_dbg(&client->dev, "[SMB329]:I2C fail\n");
  		return -EIO;
! 		}
! 	if (machine_is_incrediblec())
  		register_notifier_cable_status(&cable_status_handler);
  
  	data->address = client->addr;
***************
*** 321,326 ****
--- 269,275 ----
  static int smb329_remove(struct i2c_client *client)
  {
  	struct smb329_i2c_client   *data = i2c_get_clientdata(client);
+ 	int idx;
  	if (data->client && data->client != client)
  		i2c_unregister_device(data->client);
  	smb329_i2c_module.client = NULL;
***************
*** 337,346 ****
--- 286,338 ----
  	.remove     = smb329_remove,
  };
  
+ /* sysfs interface */
+ static ssize_t fast_charge_usb_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+ {
+ 	return sprintf(buf, "%d\n", fast_charge_usb);
+ }
+ 
+ static ssize_t fast_charge_usb_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+ {
+ 	sscanf(buf, "%du", &fast_charge_usb);
+ 	return count;
+ }
+ 
+ 
+ static struct kobj_attribute fast_charge_usb_attribute =
+ __ATTR(fast_charge_usb, 0666, fast_charge_usb_show, fast_charge_usb_store);
+ 
+ static struct attribute *attrs[] = {
+ 	&fast_charge_usb_attribute.attr,
+ 	NULL,
+ };
+ 
+ static struct attribute_group attr_group = {
+ 	.attrs = attrs,
+ };
+ 
+ static struct kobject *fast_charge_usb_kobj;
+ 
+ int fast_charge_usb_init(void)
+ {
+ int retval;
+ 
+         fast_charge_usb_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
+         if (!fast_charge_usb_kobj) {
+                 return -ENOMEM;
+         }
+         retval = sysfs_create_group(fast_charge_usb_kobj, &attr_group);
+         if (retval)
+                 kobject_put(fast_charge_usb_kobj);
+         return retval;
+ }
+ 
  static int __init sensors_smb329_init(void)
  {
      int res;
  
+ 	fast_charge_usb = 0;
+ 
  	res = i2c_add_driver(&smb329_driver);
  	if (res) {
  		pr_info("[SMB329]: Driver registration failed \n");
***************
*** 351,356 ****
--- 343,349 ----
  
  static void __exit sensors_smb329_exit(void)
  {
+ 	kobject_put(fast_charge_usb_kobj);
  	i2c_del_driver(&smb329_driver);
  }
  
***************
*** 359,362 ****
--- 352,356 ----
  MODULE_LICENSE("GPL");
  
  module_init(sensors_smb329_init);
+ module_init(fast_charge_usb_init);
  module_exit(sensors_smb329_exit);
